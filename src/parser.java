
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jul 07 07:04:24 IRDT 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.BufferedReader;
import java.io.*;
import IR.*;
import visitor.*;
import syntaxtree.*;
import symboltable.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jul 07 07:04:24 IRDT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\003\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\004\003\000\002\004\003\000" +
    "\002\005\010\000\002\005\011\000\002\005\010\000\002" +
    "\005\011\000\002\006\006\000\002\042\005\000\002\042" +
    "\004\000\002\031\002\000\002\031\003\000\002\007\005" +
    "\000\002\007\007\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\011\011\000\002\032\003" +
    "\000\002\032\004\000\002\033\005\000\002\033\006\000" +
    "\002\034\005\000\002\034\004\000\002\012\003\000\002" +
    "\012\004\000\002\013\003\000\002\013\005\000\002\043" +
    "\003\000\002\043\004\000\002\043\005\000\002\014\004" +
    "\000\002\014\005\000\002\035\004\000\002\035\004\000" +
    "\002\035\003\000\002\035\003\000\002\015\004\000\002" +
    "\015\004\000\002\015\003\000\002\015\003\000\002\015" +
    "\004\000\002\015\005\000\002\015\004\000\002\015\004" +
    "\000\002\016\005\000\002\017\005\000\002\017\006\000" +
    "\002\020\003\000\002\020\005\000\002\036\007\000\002" +
    "\036\006\000\002\021\007\000\002\021\011\000\002\021" +
    "\013\000\002\021\014\000\002\037\002\000\002\037\003" +
    "\000\002\040\003\000\002\040\002\000\002\040\003\000" +
    "\002\002\003\000\002\002\002\000\002\022\013\000\002" +
    "\022\011\000\002\022\011\000\002\023\005\000\002\023" +
    "\005\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\004\000\002\023\004\000\002\023\006\000" +
    "\002\045\005\000\002\045\005\000\002\045\003\000\002" +
    "\045\003\000\002\045\004\000\002\045\006\000\002\024" +
    "\003\000\002\024\004\000\002\024\004\000\002\024\004" +
    "\000\002\024\004\000\002\024\004\000\002\024\004\000" +
    "\002\024\005\000\002\041\005\000\002\041\006\000\002" +
    "\025\003\000\002\025\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\036\004\004\007\010\010\030\011\022\012" +
    "\005\013\012\014\032\015\020\016\031\017\024\022\025" +
    "\023\026\053\015\116\017\001\002\000\026\007\010\010" +
    "\030\011\022\012\005\013\012\014\032\015\020\016\031" +
    "\017\024\116\017\001\002\000\006\061\uffea\116\uffea\001" +
    "\002\000\040\002\ufffe\004\004\007\010\010\030\011\022" +
    "\012\005\013\012\014\032\015\020\016\031\017\024\022" +
    "\025\023\026\053\015\116\017\001\002\000\006\061\uffe4" +
    "\116\uffe4\001\002\000\006\061\uffed\116\uffed\001\002\000" +
    "\040\002\ufff9\004\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\022\ufff9\023" +
    "\ufff9\053\ufff9\116\ufff9\001\002\000\006\061\uffe9\116\uffe9" +
    "\001\002\000\004\116\017\001\002\000\040\002\ufffa\004" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa" +
    "\015\ufffa\016\ufffa\017\ufffa\022\ufffa\023\ufffa\053\ufffa\116" +
    "\ufffa\001\002\000\026\007\010\010\030\011\022\012\005" +
    "\013\012\014\032\015\020\016\031\017\024\116\017\001" +
    "\002\000\004\002\046\001\002\000\076\005\uff81\006\uff81" +
    "\020\uff81\047\uff81\050\uff81\060\uff81\061\uff81\062\uff81\063" +
    "\uff81\064\uff81\065\uff81\066\uff81\067\uff81\070\uff81\071\uff81" +
    "\072\uff81\073\uff81\074\uff81\075\uff81\076\uff81\077\uff81\100" +
    "\uff81\101\uff81\102\uff81\103\uff81\105\uff81\106\uff81\110\uff81" +
    "\116\uff81\117\uff81\001\002\000\006\061\uffe7\116\uffe7\001" +
    "\002\000\062\002\uffdc\004\uffdc\007\uffdc\010\uffdc\011\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\030\uffdc" +
    "\032\uffdc\043\uffdc\044\uffdc\046\uffdc\053\uffdc\116\uffdc\001" +
    "\002\000\006\061\uffeb\116\uffeb\001\002\000\040\002\001" +
    "\004\004\007\010\010\030\011\022\012\005\013\012\014" +
    "\032\015\020\016\031\017\024\022\025\023\026\053\015" +
    "\116\017\001\002\000\006\061\uffe5\116\uffe5\001\002\000" +
    "\004\116\017\001\002\000\026\007\010\010\030\011\022" +
    "\012\005\013\012\014\032\015\020\016\031\017\024\116" +
    "\017\001\002\000\040\002\uffff\004\004\007\010\010\030" +
    "\011\022\012\005\013\012\014\032\015\020\016\031\017" +
    "\024\022\025\023\026\053\015\116\017\001\002\000\006" +
    "\061\uffec\116\uffec\001\002\000\006\061\uffe6\116\uffe6\001" +
    "\002\000\006\061\uffe8\116\uffe8\001\002\000\004\002\ufffc" +
    "\001\002\000\062\002\uffdb\004\uffdb\007\uffdb\010\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\030" +
    "\uffdb\032\uffdb\043\uffdb\044\uffdb\046\uffdb\053\uffdb\116\uffdb" +
    "\001\002\000\004\020\036\001\002\000\030\007\010\010" +
    "\030\011\022\012\005\013\012\014\032\015\020\016\031" +
    "\017\024\023\026\116\017\001\002\000\004\021\042\001" +
    "\002\000\032\007\010\010\030\011\022\012\005\013\012" +
    "\014\032\015\020\016\031\017\024\021\uffe2\023\026\116" +
    "\017\001\002\000\004\021\uffe1\001\002\000\004\022\043" +
    "\001\002\000\004\050\044\001\002\000\040\002\uffe3\004" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\022\uffe3\023\uffe3\053\uffe3\116" +
    "\uffe3\001\002\000\004\002\ufffd\001\002\000\004\002\000" +
    "\001\002\000\004\116\017\001\002\000\004\060\051\001" +
    "\002\000\030\007\010\010\030\011\022\012\005\013\012" +
    "\014\032\015\020\016\031\017\024\061\054\116\017\001" +
    "\002\000\004\061\330\001\002\000\004\116\017\001\002" +
    "\000\006\020\056\050\055\001\002\000\040\002\ufff8\004" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8" +
    "\015\ufff8\016\ufff8\017\ufff8\022\ufff8\023\ufff8\053\ufff8\116" +
    "\ufff8\001\002\000\052\007\010\010\030\011\022\012\005" +
    "\013\012\014\032\015\020\016\031\017\024\021\065\023" +
    "\026\024\066\025\074\026\061\030\070\032\067\043\100" +
    "\044\101\046\073\116\017\001\002\000\040\002\ufff6\004" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\015\ufff6\016\ufff6\017\ufff6\022\ufff6\023\ufff6\053\ufff6\116" +
    "\ufff6\001\002\000\004\050\317\001\002\000\004\050\316" +
    "\001\002\000\006\103\244\117\314\001\002\000\052\007" +
    "\010\010\030\011\022\012\005\013\012\014\032\015\020" +
    "\016\031\017\024\021\uffd0\023\026\024\066\025\074\026" +
    "\061\030\070\032\067\043\100\044\101\046\073\116\017" +
    "\001\002\000\014\005\163\060\211\103\uffd8\116\uffe4\117" +
    "\uffd8\001\002\000\072\002\uffd5\004\uffd5\007\uffd5\010\uffd5" +
    "\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\034\uffd5\042\uffd5\043\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\053\uffd5\116\uffd5\001\002\000\036" +
    "\027\107\035\116\036\126\037\114\040\106\041\117\050" +
    "\310\051\123\060\125\063\120\104\115\105\113\106\121" +
    "\116\017\001\002\000\004\060\267\001\002\000\004\060" +
    "\261\001\002\000\052\007\uffcc\010\uffcc\011\uffcc\012\uffcc" +
    "\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\021\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\030\uffcc\032\uffcc\043\uffcc" +
    "\044\uffcc\046\uffcc\116\uffcc\001\002\000\052\007\010\010" +
    "\030\011\022\012\005\013\012\014\032\015\020\016\031" +
    "\017\024\021\uffd1\023\026\024\066\025\074\026\061\030" +
    "\070\032\067\043\100\044\101\046\073\116\017\001\002" +
    "\000\004\060\252\001\002\000\004\050\251\001\002\000" +
    "\004\021\250\001\002\000\004\050\247\001\002\000\052" +
    "\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\021\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\030\uffcd\032\uffcd\043\uffcd\044\uffcd\046\uffcd\116" +
    "\uffcd\001\002\000\004\060\227\001\002\000\004\020\056" +
    "\001\002\000\004\045\103\001\002\000\004\060\104\001" +
    "\002\000\034\027\107\035\116\036\126\037\114\040\106" +
    "\041\117\051\123\060\125\063\120\104\115\105\113\106" +
    "\121\116\017\001\002\000\054\006\uffb0\050\uffb0\061\uffb0" +
    "\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070" +
    "\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0" +
    "\077\uffb0\100\uffb0\101\uffb0\102\uffb0\110\uffb0\001\002\000" +
    "\054\006\uff83\050\uff83\061\uff83\062\uff83\063\uff83\064\uff83" +
    "\065\uff83\066\uff83\067\uff83\070\uff83\071\uff83\072\uff83\073" +
    "\uff83\074\uff83\075\uff83\076\uff83\077\uff83\100\uff83\101\uff83" +
    "\102\uff83\110\uff83\001\002\000\004\060\224\001\002\000" +
    "\004\117\222\001\002\000\046\061\220\062\137\063\147" +
    "\064\130\065\143\066\132\067\153\070\133\071\135\072" +
    "\146\073\141\074\151\075\131\076\154\077\145\100\134" +
    "\101\140\102\144\001\002\000\070\005\163\006\uffa4\050" +
    "\uffa4\060\211\061\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4" +
    "\066\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074" +
    "\uffa4\075\uffa4\076\uffa4\077\uffa4\100\uffa4\101\uffa4\102\uffa4" +
    "\103\uffd8\105\uffa4\106\uffa4\110\uffa4\117\uffd8\001\002\000" +
    "\012\104\160\105\113\106\121\116\017\001\002\000\054" +
    "\006\uff84\050\uff84\061\uff84\062\uff84\063\uff84\064\uff84\065" +
    "\uff84\066\uff84\067\uff84\070\uff84\071\uff84\072\uff84\073\uff84" +
    "\074\uff84\075\uff84\076\uff84\077\uff84\100\uff84\101\uff84\102" +
    "\uff84\110\uff84\001\002\000\034\027\173\035\116\036\126" +
    "\037\114\040\106\041\117\051\123\060\177\063\175\104" +
    "\160\105\113\106\121\116\017\001\002\000\054\006\uff87" +
    "\050\uff87\061\uff87\062\uff87\063\uff87\064\uff87\065\uff87\066" +
    "\uff87\067\uff87\070\uff87\071\uff87\072\uff87\073\uff87\074\uff87" +
    "\075\uff87\076\uff87\077\uff87\100\uff87\101\uff87\102\uff87\110" +
    "\uff87\001\002\000\054\006\uff86\050\uff86\061\uff86\062\uff86" +
    "\063\uff86\064\uff86\065\uff86\066\uff86\067\uff86\070\uff86\071" +
    "\uff86\072\uff86\073\uff86\074\uff86\075\uff86\076\uff86\077\uff86" +
    "\100\uff86\101\uff86\102\uff86\110\uff86\001\002\000\034\027" +
    "\107\035\116\036\126\037\114\040\106\041\117\051\123" +
    "\060\125\063\120\104\115\105\113\106\121\116\017\001" +
    "\002\000\012\104\160\105\113\106\121\116\017\001\002" +
    "\000\060\006\uffaf\050\uffaf\061\uffaf\062\uffaf\063\uffaf\064" +
    "\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf" +
    "\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf\101" +
    "\uffaf\102\uffaf\105\156\106\157\110\uffaf\001\002\000\054" +
    "\006\uff82\050\uff82\061\uff82\062\uff82\063\uff82\064\uff82\065" +
    "\uff82\066\uff82\067\uff82\070\uff82\071\uff82\072\uff82\073\uff82" +
    "\074\uff82\075\uff82\076\uff82\077\uff82\100\uff82\101\uff82\102" +
    "\uff82\110\uff82\001\002\000\054\006\uffae\050\uffae\061\uffae" +
    "\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae\067\uffae\070" +
    "\uffae\071\uffae\072\uffae\073\uffae\074\uffae\075\uffae\076\uffae" +
    "\077\uffae\100\uffae\101\uffae\102\uffae\110\uffae\001\002\000" +
    "\034\027\107\035\116\036\126\037\114\040\106\041\117" +
    "\051\123\060\125\063\120\104\115\105\113\106\121\116" +
    "\017\001\002\000\054\006\uff85\050\uff85\061\uff85\062\uff85" +
    "\063\uff85\064\uff85\065\uff85\066\uff85\067\uff85\070\uff85\071" +
    "\uff85\072\uff85\073\uff85\074\uff85\075\uff85\076\uff85\077\uff85" +
    "\100\uff85\101\uff85\102\uff85\110\uff85\001\002\000\046\061" +
    "\152\062\137\063\147\064\130\065\143\066\132\067\153" +
    "\070\133\071\135\072\146\073\141\074\151\075\131\076" +
    "\154\077\145\100\134\101\140\102\144\001\002\000\034" +
    "\027\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\051" +
    "\uff96\060\uff96\063\uff96\104\uff96\105\uff96\106\uff96\116\uff96" +
    "\001\002\000\034\027\uff8e\035\uff8e\036\uff8e\037\uff8e\040" +
    "\uff8e\041\uff8e\051\uff8e\060\uff8e\063\uff8e\104\uff8e\105\uff8e" +
    "\106\uff8e\116\uff8e\001\002\000\034\027\uff94\035\uff94\036" +
    "\uff94\037\uff94\040\uff94\041\uff94\051\uff94\060\uff94\063\uff94" +
    "\104\uff94\105\uff94\106\uff94\116\uff94\001\002\000\034\027" +
    "\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92\051\uff92" +
    "\060\uff92\063\uff92\104\uff92\105\uff92\106\uff92\116\uff92\001" +
    "\002\000\034\027\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a" +
    "\041\uff8a\051\uff8a\060\uff8a\063\uff8a\104\uff8a\105\uff8a\106" +
    "\uff8a\116\uff8a\001\002\000\034\027\uff91\035\uff91\036\uff91" +
    "\037\uff91\040\uff91\041\uff91\051\uff91\060\uff91\063\uff91\104" +
    "\uff91\105\uff91\106\uff91\116\uff91\001\002\000\034\027\107" +
    "\035\116\036\126\037\114\040\106\041\117\051\123\060" +
    "\125\063\120\104\115\105\113\106\121\116\017\001\002" +
    "\000\034\027\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041" +
    "\uff98\051\uff98\060\uff98\063\uff98\104\uff98\105\uff98\106\uff98" +
    "\116\uff98\001\002\000\034\027\uff89\035\uff89\036\uff89\037" +
    "\uff89\040\uff89\041\uff89\051\uff89\060\uff89\063\uff89\104\uff89" +
    "\105\uff89\106\uff89\116\uff89\001\002\000\034\027\uff8f\035" +
    "\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\051\uff8f\060\uff8f" +
    "\063\uff8f\104\uff8f\105\uff8f\106\uff8f\116\uff8f\001\002\000" +
    "\034\027\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a" +
    "\051\uff9a\060\uff9a\063\uff9a\104\uff9a\105\uff9a\106\uff9a\116" +
    "\uff9a\001\002\000\034\027\uff95\035\uff95\036\uff95\037\uff95" +
    "\040\uff95\041\uff95\051\uff95\060\uff95\063\uff95\104\uff95\105" +
    "\uff95\106\uff95\116\uff95\001\002\000\034\027\uff88\035\uff88" +
    "\036\uff88\037\uff88\040\uff88\041\uff88\051\uff88\060\uff88\063" +
    "\uff88\104\uff88\105\uff88\106\uff88\116\uff88\001\002\000\034" +
    "\027\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\051" +
    "\uff8b\060\uff8b\063\uff8b\104\uff8b\105\uff8b\106\uff8b\116\uff8b" +
    "\001\002\000\034\027\uff90\035\uff90\036\uff90\037\uff90\040" +
    "\uff90\041\uff90\051\uff90\060\uff90\063\uff90\104\uff90\105\uff90" +
    "\106\uff90\116\uff90\001\002\000\034\027\uff97\035\uff97\036" +
    "\uff97\037\uff97\040\uff97\041\uff97\051\uff97\060\uff97\063\uff97" +
    "\104\uff97\105\uff97\106\uff97\116\uff97\001\002\000\034\027" +
    "\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\051\uff99" +
    "\060\uff99\063\uff99\104\uff99\105\uff99\106\uff99\116\uff99\001" +
    "\002\000\034\027\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d" +
    "\041\uff8d\051\uff8d\060\uff8d\063\uff8d\104\uff8d\105\uff8d\106" +
    "\uff8d\116\uff8d\001\002\000\054\006\uffb1\050\uffb1\061\uffb1" +
    "\062\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070" +
    "\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1" +
    "\077\uffb1\100\uffb1\101\uffb1\102\uffb1\110\uffb1\001\002\000" +
    "\034\027\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93" +
    "\051\uff93\060\uff93\063\uff93\104\uff93\105\uff93\106\uff93\116" +
    "\uff93\001\002\000\034\027\uff8c\035\uff8c\036\uff8c\037\uff8c" +
    "\040\uff8c\041\uff8c\051\uff8c\060\uff8c\063\uff8c\104\uff8c\105" +
    "\uff8c\106\uff8c\116\uff8c\001\002\000\054\006\uffb2\050\uffb2" +
    "\061\uffb2\062\137\063\147\064\130\065\143\066\132\067" +
    "\153\070\133\071\135\072\146\073\141\074\151\075\131" +
    "\076\154\077\145\100\134\101\140\102\144\110\uffb2\001" +
    "\002\000\060\006\uff9f\050\uff9f\061\uff9f\062\uff9f\063\uff9f" +
    "\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\072" +
    "\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f\077\uff9f\100\uff9f" +
    "\101\uff9f\102\uff9f\105\uff9f\106\uff9f\110\uff9f\001\002\000" +
    "\060\006\uff9e\050\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e" +
    "\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e\073" +
    "\uff9e\074\uff9e\075\uff9e\076\uff9e\077\uff9e\100\uff9e\101\uff9e" +
    "\102\uff9e\105\uff9e\106\uff9e\110\uff9e\001\002\000\012\104" +
    "\160\105\113\106\121\116\017\001\002\000\064\005\163" +
    "\006\uffa4\050\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\065" +
    "\uffa4\066\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4" +
    "\074\uffa4\075\uffa4\076\uffa4\077\uffa4\100\uffa4\101\uffa4\102" +
    "\uffa4\105\uffa4\106\uffa4\110\uffa4\117\uffd8\001\002\000\060" +
    "\006\uffa0\050\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065" +
    "\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0\073\uffa0" +
    "\074\uffa0\075\uffa0\076\uffa0\077\uffa0\100\uffa0\101\uffa0\102" +
    "\uffa0\105\156\106\157\110\uffa0\001\002\000\034\027\107" +
    "\035\116\036\126\037\114\040\106\041\117\051\123\060" +
    "\125\063\120\104\115\105\113\106\121\116\017\001\002" +
    "\000\064\006\uffa3\050\uffa3\061\uffa3\062\uffa3\063\uffa3\064" +
    "\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3" +
    "\073\uffa3\074\uffa3\075\uffa3\076\uffa3\077\uffa3\100\uffa3\101" +
    "\uffa3\102\uffa3\103\uffd7\105\uffa3\106\uffa3\110\uffa3\117\uffd7" +
    "\001\002\000\046\006\166\062\137\063\147\064\130\065" +
    "\143\066\132\067\153\070\133\071\135\072\146\073\141" +
    "\074\151\075\131\076\154\077\145\100\134\101\140\102" +
    "\144\001\002\000\066\005\163\006\uff9c\050\uff9c\061\uff9c" +
    "\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\070" +
    "\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076\uff9c" +
    "\077\uff9c\100\uff9c\101\uff9c\102\uff9c\103\uff9c\105\uff9c\106" +
    "\uff9c\110\uff9c\117\uff9c\001\002\000\064\006\uff9b\050\uff9b" +
    "\061\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067" +
    "\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b" +
    "\076\uff9b\077\uff9b\100\uff9b\101\uff9b\102\uff9b\103\uff9b\105" +
    "\uff9b\106\uff9b\110\uff9b\117\uff9b\001\002\000\060\006\uffa2" +
    "\050\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066" +
    "\uffa2\067\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2" +
    "\075\uffa2\076\uffa2\077\uffa2\100\uffa2\101\uffa2\102\uffa2\105" +
    "\156\106\157\110\uffa2\001\002\000\054\006\uffad\050\uffad" +
    "\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067" +
    "\uffad\070\uffad\071\uffad\072\uffad\073\uffad\074\uffad\075\uffad" +
    "\076\uffad\077\uffad\100\uffad\101\uffad\102\uffad\110\uffad\001" +
    "\002\000\054\006\uffa8\050\uffa8\061\uffa8\062\uffa8\063\uffa8" +
    "\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072" +
    "\uffa8\073\uffa8\074\uffa8\075\uffa8\076\uffa8\077\uffa8\100\uffa8" +
    "\101\uffa8\102\uffa8\110\uffa8\001\002\000\004\060\205\001" +
    "\002\000\054\006\uffac\050\uffac\061\uffac\062\uffac\063\uffac" +
    "\064\uffac\065\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072" +
    "\uffac\073\uffac\074\uffac\075\uffac\076\uffac\077\uffac\100\uffac" +
    "\101\uffac\102\144\110\uffac\001\002\000\034\027\107\035" +
    "\116\036\126\037\114\040\106\041\117\051\123\060\125" +
    "\063\120\104\115\105\113\106\121\116\017\001\002\000" +
    "\054\006\uffa7\050\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7" +
    "\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073" +
    "\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7\100\uffa7\101\uffa7" +
    "\102\uffa7\110\uffa7\001\002\000\034\027\107\035\116\036" +
    "\126\037\114\040\106\041\117\051\123\060\125\063\120" +
    "\104\115\105\113\106\121\116\017\001\002\000\046\061" +
    "\201\062\137\063\147\064\130\065\143\066\132\067\153" +
    "\070\133\071\135\072\146\073\141\074\151\075\131\076" +
    "\154\077\145\100\134\101\140\102\144\001\002\000\054" +
    "\006\uffa9\050\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9\065" +
    "\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9" +
    "\074\uffa9\075\uffa9\076\uffa9\077\uffa9\100\uffa9\101\uffa9\102" +
    "\uffa9\110\uffa9\001\002\000\054\006\uffa6\050\uffa6\061\uffa6" +
    "\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070" +
    "\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6" +
    "\077\uffa6\100\uffa6\101\uffa6\102\uffa6\110\uffa6\001\002\000" +
    "\034\027\107\035\116\036\126\037\114\040\106\041\117" +
    "\051\123\060\125\063\120\104\115\105\113\106\121\116" +
    "\017\001\002\000\054\006\uffaa\050\uffaa\061\uffaa\062\137" +
    "\063\147\064\130\065\143\066\132\067\153\070\133\071" +
    "\135\072\146\073\141\074\151\075\131\076\154\077\145" +
    "\100\134\101\140\102\144\110\uffaa\001\002\000\026\007" +
    "\010\010\030\011\022\012\005\013\012\014\032\015\020" +
    "\016\031\017\024\116\017\001\002\000\004\061\207\001" +
    "\002\000\054\006\uffa5\050\uffa5\061\uffa5\062\uffa5\063\uffa5" +
    "\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072" +
    "\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\100\uffa5" +
    "\101\uffa5\102\uffa5\110\uffa5\001\002\000\060\006\uffa1\050" +
    "\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1" +
    "\067\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1\074\uffa1\075" +
    "\uffa1\076\uffa1\077\uffa1\100\uffa1\101\uffa1\102\uffa1\105\156" +
    "\106\157\110\uffa1\001\002\000\036\027\107\035\116\036" +
    "\126\037\114\040\106\041\117\051\123\060\125\061\214" +
    "\063\120\104\115\105\113\106\121\116\017\001\002\000" +
    "\050\061\uffc4\062\137\063\147\064\130\065\143\066\132" +
    "\067\153\070\133\071\135\072\146\073\141\074\151\075" +
    "\131\076\154\077\145\100\134\101\140\102\144\110\216" +
    "\001\002\000\004\061\215\001\002\000\054\006\uffc6\050" +
    "\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6" +
    "\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075" +
    "\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6\110\uffc6" +
    "\001\002\000\054\006\uffc5\050\uffc5\061\uffc5\062\uffc5\063" +
    "\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5" +
    "\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\100" +
    "\uffc5\101\uffc5\102\uffc5\110\uffc5\001\002\000\034\027\107" +
    "\035\116\036\126\037\114\040\106\041\117\051\123\060" +
    "\125\063\120\104\115\105\113\106\121\116\017\001\002" +
    "\000\004\061\uffc3\001\002\000\004\050\221\001\002\000" +
    "\052\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4" +
    "\015\uffb4\016\uffb4\017\uffb4\021\uffb4\023\uffb4\024\uffb4\025" +
    "\uffb4\026\uffb4\030\uffb4\032\uffb4\043\uffb4\044\uffb4\046\uffb4" +
    "\116\uffb4\001\002\000\004\116\017\001\002\000\064\006" +
    "\uff9d\050\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d" +
    "\066\uff9d\067\uff9d\070\uff9d\071\uff9d\072\uff9d\073\uff9d\074" +
    "\uff9d\075\uff9d\076\uff9d\077\uff9d\100\uff9d\101\uff9d\102\uff9d" +
    "\103\uffd6\105\uff9d\106\uff9d\110\uff9d\117\uffd6\001\002\000" +
    "\026\007\010\010\030\011\022\012\005\013\012\014\032" +
    "\015\020\016\031\017\024\116\017\001\002\000\004\061" +
    "\226\001\002\000\054\006\uffab\050\uffab\061\uffab\062\uffab" +
    "\063\uffab\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071" +
    "\uffab\072\uffab\073\uffab\074\uffab\075\uffab\076\uffab\077\uffab" +
    "\100\uffab\101\uffab\102\uffab\110\uffab\001\002\000\006\050" +
    "\uffb6\116\017\001\002\000\014\005\163\050\uffd8\103\uffd8" +
    "\110\uffd8\117\uffd8\001\002\000\004\050\233\001\002\000" +
    "\004\050\uffb7\001\002\000\034\027\107\035\116\036\126" +
    "\037\114\040\106\041\117\051\123\060\125\063\120\104" +
    "\115\105\113\106\121\116\017\001\002\000\046\050\235" +
    "\062\137\063\147\064\130\065\143\066\132\067\153\070" +
    "\133\071\135\072\146\073\141\074\151\075\131\076\154" +
    "\077\145\100\134\101\140\102\144\001\002\000\036\027" +
    "\107\035\116\036\126\037\114\040\106\041\117\051\123" +
    "\060\125\061\uffb9\063\120\104\115\105\113\106\121\116" +
    "\017\001\002\000\006\103\244\117\222\001\002\000\046" +
    "\061\uffb8\062\137\063\147\064\130\065\143\066\132\067" +
    "\153\070\133\071\135\072\146\073\141\074\151\075\131" +
    "\076\154\077\145\100\134\101\140\102\144\001\002\000" +
    "\004\061\uffba\001\002\000\004\061\242\001\002\000\004" +
    "\020\056\001\002\000\052\007\uffb5\010\uffb5\011\uffb5\012" +
    "\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\021\uffb5" +
    "\023\uffb5\024\uffb5\025\uffb5\026\uffb5\030\uffb5\032\uffb5\043" +
    "\uffb5\044\uffb5\046\uffb5\116\uffb5\001\002\000\034\027\107" +
    "\035\116\036\126\037\114\040\106\041\117\051\123\060" +
    "\125\063\120\104\115\105\113\106\121\116\017\001\002" +
    "\000\050\050\uffc7\061\uffc7\062\137\063\147\064\130\065" +
    "\143\066\132\067\153\070\133\071\135\072\146\073\141" +
    "\074\151\075\131\076\154\077\145\100\134\101\140\102" +
    "\144\001\002\000\012\050\uffd7\103\uffd7\110\uffd7\117\uffd7" +
    "\001\002\000\052\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\021\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\030\uffcf\032\uffcf\043\uffcf\044" +
    "\uffcf\046\uffcf\116\uffcf\001\002\000\072\002\uffd4\004\uffd4" +
    "\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015" +
    "\uffd4\016\uffd4\017\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\030\uffd4\031\uffd4\032\uffd4\034\uffd4\042" +
    "\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\053\uffd4\116\uffd4" +
    "\001\002\000\052\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013" +
    "\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\021\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\030\uffc9\032\uffc9\043\uffc9\044" +
    "\uffc9\046\uffc9\116\uffc9\001\002\000\004\116\017\001\002" +
    "\000\004\047\254\001\002\000\004\116\017\001\002\000" +
    "\004\061\256\001\002\000\004\020\056\001\002\000\052" +
    "\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015" +
    "\uffb3\016\uffb3\017\uffb3\021\uffb3\023\uffb3\024\uffb3\025\uffb3" +
    "\026\uffb3\030\uffb3\032\uffb3\043\uffb3\044\uffb3\046\uffb3\116" +
    "\uffb3\001\002\000\004\021\uffd3\001\002\000\034\027\107" +
    "\035\116\036\126\037\114\040\106\041\117\051\123\060" +
    "\125\063\120\104\115\105\113\106\121\116\017\001\002" +
    "\000\046\061\263\062\137\063\147\064\130\065\143\066" +
    "\132\067\153\070\133\071\135\072\146\073\141\074\151" +
    "\075\131\076\154\077\145\100\134\101\140\102\144\001" +
    "\002\000\004\020\056\001\002\000\054\007\uffc0\010\uffc0" +
    "\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017" +
    "\uffc0\021\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\030\uffc0" +
    "\031\265\032\uffc0\043\uffc0\044\uffc0\046\uffc0\116\uffc0\001" +
    "\002\000\004\020\056\001\002\000\052\007\uffbf\010\uffbf" +
    "\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017" +
    "\uffbf\021\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\030\uffbf" +
    "\032\uffbf\043\uffbf\044\uffbf\046\uffbf\116\uffbf\001\002\000" +
    "\004\116\017\001\002\000\004\061\271\001\002\000\004" +
    "\033\272\001\002\000\004\111\273\001\002\000\006\034" +
    "\276\042\274\001\002\000\004\111\306\001\002\000\004" +
    "\042\303\001\002\000\004\035\277\001\002\000\004\111" +
    "\300\001\002\000\004\020\056\001\002\000\006\034\276" +
    "\042\uffc1\001\002\000\004\042\uffc2\001\002\000\004\111" +
    "\304\001\002\000\004\020\056\001\002\000\052\007\uffbd" +
    "\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016" +
    "\uffbd\017\uffbd\021\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\030\uffbd\032\uffbd\043\uffbd\044\uffbd\046\uffbd\116\uffbd\001" +
    "\002\000\004\020\056\001\002\000\052\007\uffbe\010\uffbe" +
    "\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017" +
    "\uffbe\021\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\030\uffbe" +
    "\032\uffbe\043\uffbe\044\uffbe\046\uffbe\116\uffbe\001\002\000" +
    "\052\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\017\uffcb\021\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\030\uffcb\032\uffcb\043\uffcb\044\uffcb\046\uffcb" +
    "\116\uffcb\001\002\000\046\050\312\062\137\063\147\064" +
    "\130\065\143\066\132\067\153\070\133\071\135\072\146" +
    "\073\141\074\151\075\131\076\154\077\145\100\134\101" +
    "\140\102\144\001\002\000\052\007\uffca\010\uffca\011\uffca" +
    "\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\021" +
    "\uffca\023\uffca\024\uffca\025\uffca\026\uffca\030\uffca\032\uffca" +
    "\043\uffca\044\uffca\046\uffca\116\uffca\001\002\000\004\021" +
    "\uffd2\001\002\000\004\116\017\001\002\000\012\050\uffd6" +
    "\103\uffd6\110\uffd6\117\uffd6\001\002\000\052\007\uffc8\010" +
    "\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8" +
    "\017\uffc8\021\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\030" +
    "\uffc8\032\uffc8\043\uffc8\044\uffc8\046\uffc8\116\uffc8\001\002" +
    "\000\052\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014" +
    "\uffce\015\uffce\016\uffce\017\uffce\021\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\030\uffce\032\uffce\043\uffce\044\uffce\046" +
    "\uffce\116\uffce\001\002\000\010\005\321\061\ufff1\110\ufff1" +
    "\001\002\000\004\006\326\001\002\000\006\061\ufff0\110" +
    "\ufff0\001\002\000\006\061\uffef\110\324\001\002\000\026" +
    "\007\010\010\030\011\022\012\005\013\012\014\032\015" +
    "\020\016\031\017\024\116\017\001\002\000\004\061\uffee" +
    "\001\002\000\010\005\321\061\ufff2\110\ufff2\001\002\000" +
    "\006\061\ufff3\110\ufff3\001\002\000\006\020\056\050\331" +
    "\001\002\000\040\002\ufff7\004\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7" +
    "\022\ufff7\023\ufff7\053\ufff7\116\ufff7\001\002\000\040\002" +
    "\ufff5\004\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\017\ufff5\022\ufff5\023\ufff5\053" +
    "\ufff5\116\ufff5\001\002\000\012\050\uffda\103\343\110\uffda" +
    "\117\314\001\002\000\006\050\336\110\335\001\002\000" +
    "\004\116\017\001\002\000\062\002\uffe0\004\uffe0\007\uffe0" +
    "\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\030\uffe0\032\uffe0\043\uffe0\044\uffe0\046\uffe0\053" +
    "\uffe0\116\uffe0\001\002\000\004\050\340\001\002\000\062" +
    "\002\uffdf\004\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\026\uffdf\030\uffdf\032\uffdf\043" +
    "\uffdf\044\uffdf\046\uffdf\053\uffdf\116\uffdf\001\002\000\006" +
    "\050\uffdd\110\335\001\002\000\004\050\uffde\001\002\000" +
    "\034\027\107\035\116\036\126\037\114\040\106\041\117" +
    "\051\123\060\125\063\120\104\115\105\113\106\121\116" +
    "\017\001\002\000\050\050\uffd9\062\137\063\147\064\130" +
    "\065\143\066\132\067\153\070\133\071\135\072\146\073" +
    "\141\074\151\075\131\076\154\077\145\100\134\101\140" +
    "\102\144\110\uffd9\001\002\000\004\002\ufffb\001\002\000" +
    "\004\116\017\001\002\000\004\050\350\001\002\000\040" +
    "\002\ufff4\004\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\022\ufff4\023\ufff4" +
    "\053\ufff4\116\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\024\003\015\004\026\005\013\006\010\010" +
    "\012\011\005\012\022\033\020\044\006\001\001\000\006" +
    "\010\345\044\006\001\001\000\002\001\001\000\024\003" +
    "\344\004\026\005\013\006\010\010\012\011\005\012\022" +
    "\033\020\044\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\333" +
    "\043\332\044\227\001\001\000\002\001\001\000\006\010" +
    "\046\044\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\044\004\026\005\013\006\010\010\012\011\005" +
    "\012\022\033\020\044\006\001\001\000\002\001\001\000" +
    "\004\044\034\001\001\000\010\010\012\033\033\044\006" +
    "\001\001\000\024\003\032\004\026\005\013\006\010\010" +
    "\012\011\005\012\022\033\020\044\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\010\012" +
    "\012\037\032\036\033\020\044\006\001\001\000\002\001" +
    "\001\000\014\010\012\012\037\032\040\033\020\044\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\047\001\001\000\002\001\001\000\010\007" +
    "\051\010\052\044\006\001\001\000\002\001\001\000\004" +
    "\044\317\001\001\000\004\014\056\001\001\000\002\001" +
    "\001\000\030\010\012\012\071\015\062\016\075\017\057" +
    "\021\076\022\070\033\020\035\074\043\061\044\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\010\012\012\071\015\062\016" +
    "\075\017\057\021\076\022\070\033\020\035\312\043\061" +
    "\044\063\001\001\000\004\041\245\001\001\000\002\001" +
    "\001\000\016\017\104\023\310\024\121\030\123\043\107" +
    "\044\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\010\012\012\071\015\062\016\075" +
    "\017\057\021\076\022\070\033\020\035\257\043\061\044" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\104\023\110\024\121\030\123\043" +
    "\107\044\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\025\135\026" +
    "\141\027\147\001\001\000\004\041\163\001\001\000\010" +
    "\024\207\043\107\044\160\001\001\000\002\001\001\000" +
    "\016\017\171\024\167\030\175\043\107\044\111\045\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\017" +
    "\104\023\170\024\121\030\123\043\107\044\111\001\001" +
    "\000\010\024\161\043\107\044\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\017\104" +
    "\023\126\024\121\030\123\043\107\044\111\001\001\000" +
    "\002\001\001\000\010\025\135\026\141\027\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\104\023\154\024\121\030\123\043\107\044\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\135\026\141\027\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\167\043\107\044\160\001\001\000\004\041\163\001\001" +
    "\000\002\001\001\000\016\017\104\023\164\024\121\030" +
    "\123\043\107\044\111\001\001\000\002\001\001\000\010" +
    "\025\135\026\141\027\147\001\001\000\004\041\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\025\135" +
    "\026\141\027\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\202\026\141\027\147\001\001\000\016" +
    "\017\104\023\201\024\121\030\123\043\107\044\111\001" +
    "\001\000\002\001\001\000\016\017\104\023\177\024\121" +
    "\030\123\043\107\044\111\001\001\000\010\025\135\026" +
    "\141\027\147\001\001\000\002\001\001\000\010\025\135" +
    "\026\141\027\147\001\001\000\016\017\104\023\203\024" +
    "\121\030\123\043\107\044\111\001\001\000\010\025\135" +
    "\026\141\027\147\001\001\000\006\010\205\044\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\017\104\020\212\023\211\024\121\030\123\043" +
    "\107\044\111\001\001\000\010\025\135\026\141\027\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\017\104\020\216\023\211\024\121\030\123" +
    "\043\107\044\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\222\001\001\000\002" +
    "\001\001\000\006\010\224\044\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\230\016\231\043\061" +
    "\044\227\001\001\000\004\041\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\017\104\023\233\024\121" +
    "\030\123\043\107\044\111\001\001\000\010\025\135\026" +
    "\141\027\147\001\001\000\022\016\237\017\104\023\236" +
    "\024\121\030\123\040\240\043\235\044\111\001\001\000" +
    "\002\001\001\000\010\025\135\026\141\027\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\242\001" +
    "\001\000\002\001\001\000\016\017\104\023\244\024\121" +
    "\030\123\043\107\044\111\001\001\000\010\025\135\026" +
    "\141\027\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\252\001" +
    "\001\000\002\001\001\000\004\044\254\001\001\000\002" +
    "\001\001\000\004\014\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\104\023\261\024\121\030\123" +
    "\043\107\044\111\001\001\000\010\025\135\026\141\027" +
    "\147\001\001\000\004\014\263\001\001\000\002\001\001" +
    "\000\004\014\265\001\001\000\002\001\001\000\004\044" +
    "\267\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\274\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\300\001\001\000\004\036\301\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\304\001\001\000\002" +
    "\001\001\000\004\014\306\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\025\135\026\141\027\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\314\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\322\042\321\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\324\010\052" +
    "\044\006\001\001\000\002\001\001\000\004\042\326\001" +
    "\001\000\002\001\001\000\004\014\331\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\336\001\001\000\010\013\340\043\332\044\227\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\341\001\001\000\002\001\001\000\016\017\104" +
    "\023\343\024\121\030\123\043\107\044\111\001\001\000" +
    "\010\025\135\026\141\027\147\001\001\000\002\001\001" +
    "\000\004\044\346\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Connect this parser to a scanner!
    Plexer s;
    parser(Plexer s){ this.s=s; }
 public static void main(String[] args) throws Exception {
        System.out.println("Parsing...");
        ComplexSymbolFactory csf = new ComplexSymbolFactory();
        InputStream inputStream = new FileInputStream("input.in");
        Plexer plexer = new Plexer(new BufferedReader(new InputStreamReader(inputStream)), csf);
        ScannerBuffer lexer = new ScannerBuffer
                (plexer);
        parser p = new parser(plexer);
        Symbol parse_tree = p.parse();

        File output = new File("output.ll");
        FileWriter fileWriter = new FileWriter("output.ll");
        BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
        Program program = ((Program) parse_tree.value);
        if (program != null) {
            BuildSymbolTableVisitor bstVisitor = new BuildSymbolTableVisitor();
            bstVisitor.visit(program);
            Scope symbolTable = bstVisitor.getFirstScope();
            IRVisitor intermediateVisitor = new IRVisitor((SymbolTable) symbolTable);
            intermediateVisitor.visit(program);

            List<Quadruple> IRList = intermediateVisitor.IRlist;
            ArrayList<DclIR> DCLList = bstVisitor.dclList;
            ArrayList<StructIR> structIRS = bstVisitor.structList;
            CodeGenerator codeGenerator = new CodeGenerator(intermediateVisitor, (SymbolTable) symbolTable);
            codeGenerator.DCLlistHandler(DCLList);
            codeGenerator.StructListHandler(structIRS);
            for (int i = 0; i < IRList.size(); i++) {
                if (IRList.get(i) instanceof AssignmentIR) {
                    codeGenerator.AssignmentHandler(i);
                } else if (IRList.get(i) instanceof ReturnIR)
                    codeGenerator.ReturnHandler(i);
                else if (IRList.get(i) instanceof ConditionalBranch) {
                    codeGenerator.ConditionalBranchHandler(i);
                } else if (IRList.get(i) instanceof MethodCallIR)
                    codeGenerator.methodCallHandler(i);
                else if (IRList.get(i) instanceof StringGeneratorIR)
                    codeGenerator.StringGeneratorHandler(i);
                else if (IRList.get(i) instanceof GenerateMethodSignature)
                    codeGenerator.GenerateMethodSignatureHandler(i);
                else if (IRList.get(i) instanceof VariableAssignIR)
                    codeGenerator.VariableAssignIRHandler(i);
                else if (IRList.get(i) instanceof UnconditionalBranchIR)
                    codeGenerator.UnconditionalBranch(i);
                else if (IRList.get(i) instanceof RetIR)
                    codeGenerator.RetIRHandler(i);
                else if (IRList.get(i) instanceof MakeLabelIR)
                    codeGenerator.MakeLabelHandler(i);
                else if(IRList.get(i) instanceof AssignFromVariableIR)
                    codeGenerator.AssignFromVariableIRHandler(i);
                else if(IRList.get(i) instanceof AssignToArrayIR)
                  codeGenerator.AssignToArrayHandler(i);
                else if(IRList.get(i) instanceof ArithmaticLocalIR)
                  codeGenerator.ArithmaticLocalIRHandler(i);
                else if(IRList.get(i) instanceof ForEachConditionalBr)
                  codeGenerator.ForEachConditionalBrHandler(i);
                else if (IRList.get(i) instanceof SwitchIR)
                  codeGenerator.SwitchIRHandler(i);
                else if(IRList.get(i) instanceof AssignFromRecord)
                  codeGenerator.AssignFromRecordIR(i);
                else throw new Exception("shitttt");

            }
            System.out.println();
            if(codeGenerator.stringGlobalCodeList!=null){
              for (String s :
                      codeGenerator.stringGlobalCodeList) {
                bufferedWriter.write(s);
                bufferedWriter.newLine();

              }

            }
            if(codeGenerator.StandardFunctionDeclarations!=null){
              for (String s :
                      codeGenerator.StandardFunctionDeclarations) {
                bufferedWriter.write(s);
                bufferedWriter.newLine();

              }
            }
          if (codeGenerator.Structlist != null)
            for (String s :
                    codeGenerator.Structlist) {
              bufferedWriter.write(s);
              bufferedWriter.newLine();

            }
            if (codeGenerator.DCLlist != null)
                for (String s :
                        codeGenerator.DCLlist) {
                    bufferedWriter.write(s);
                    bufferedWriter.newLine();

                }

            for (String s :
                    codeGenerator.codes) {
                bufferedWriter.write(s);
                bufferedWriter.newLine();
            }
            bufferedWriter.close();
            fileWriter.close();

        }


    /*        Reader br = new BufferedReader(new InputStreamReader(System.in));;
            Plexer plexer = new Plexer(br,new ComplexSymbolFactory());
            parser parser = new parser(plexer, new ComplexSymbolFactory());
            parser.parse();*/
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // identifier ::= ID 
            {
              Identifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Identifier(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // const_val ::= LONG_CONST 
            {
              Const_Val RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Const_Val(l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_val",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // const_val ::= STRING_CONST 
            {
              Const_Val RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Const_Val(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_val",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // const_val ::= BOOL_CONST 
            {
              Const_Val RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Const_Val(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_val",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // const_val ::= CHAR_CONST 
            {
              Const_Val RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Const_Val(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_val",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // const_val ::= REAL_CONST 
            {
              Const_Val RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Const_Val(r);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_val",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // const_val ::= INT_CONST 
            {
              Const_Val RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Const_Val(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_val",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // conditional ::= NOT 
            {
              Conditional RESULT =null;
		RESULT = new Conditional(Conditional.ConditionalType.NOT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // conditional ::= OR 
            {
              Conditional RESULT =null;
		RESULT = new Conditional(Conditional.ConditionalType.OR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // conditional ::= AND 
            {
              Conditional RESULT =null;
		RESULT = new Conditional(Conditional.ConditionalType.AND);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // conditional ::= GREATER 
            {
              Conditional RESULT =null;
		RESULT = new Conditional(Conditional.ConditionalType.GREATER);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // conditional ::= LESS 
            {
              Conditional RESULT =null;
		RESULT = new Conditional(Conditional.ConditionalType.LESS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // conditional ::= LEQ 
            {
              Conditional RESULT =null;
		RESULT = new Conditional(Conditional.ConditionalType.LEQ);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // conditional ::= GEQ 
            {
              Conditional RESULT =null;
		RESULT = new Conditional(Conditional.ConditionalType.GEQ);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // conditional ::= NOTEQUAL 
            {
              Conditional RESULT =null;
		RESULT = new Conditional(Conditional.ConditionalType.NOTEQUAL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // conditional ::= ISEQUAL 
            {
              Conditional RESULT =null;
		RESULT = new Conditional(Conditional.ConditionalType.ISEQUAL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // arithmatic ::= CARET 
            {
              Arithmatic RESULT =null;
		RESULT = new Arithmatic(Arithmatic.ArithmaticSign.CARET);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // arithmatic ::= PIPE 
            {
              Arithmatic RESULT =null;
		RESULT = new Arithmatic(Arithmatic.ArithmaticSign.PIPE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // arithmatic ::= AMPERSAND 
            {
              Arithmatic RESULT =null;
		RESULT = new Arithmatic(Arithmatic.ArithmaticSign.AMPERSAND);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // arithmatic ::= MOD 
            {
              Arithmatic RESULT =null;
		RESULT = new Arithmatic(Arithmatic.ArithmaticSign.MOD);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // arithmatic ::= SLASH 
            {
              Arithmatic RESULT =null;
		RESULT = new Arithmatic(Arithmatic.ArithmaticSign.SLASH);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // arithmatic ::= TIMES 
            {
              Arithmatic RESULT =null;
		RESULT = new Arithmatic(Arithmatic.ArithmaticSign.TIMES);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // arithmatic ::= MINUS 
            {
              Arithmatic RESULT =null;
		RESULT = new Arithmatic(Arithmatic.ArithmaticSign.MINUS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // arithmatic ::= PLUS 
            {
              Arithmatic RESULT =null;
		RESULT = new Arithmatic(Arithmatic.ArithmaticSign.PLUS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // binary_op ::= conditional 
            {
              Binary_Op RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Conditional c = (Conditional)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Binary_Op(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // binary_op ::= arithmatic 
            {
              Binary_Op RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arithmatic a = (Arithmatic)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Binary_Op(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // array_index_recursive ::= LBRAC expr RBRAC array_index_recursive 
            {
              Array_Index_Recursive RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Array_Index_Recursive ai = (Array_Index_Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Array_Index_Recursive(e, ai);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_index_recursive",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // array_index_recursive ::= LBRAC expr RBRAC 
            {
              Array_Index_Recursive RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Array_Index_Recursive(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_index_recursive",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // variable ::= variable_prime DOT identifier 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Variable(Variable.VariableType.RECORD_ITEM, v, i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // variable ::= variable PLUSPLUS 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Variable(Variable.VariableType.VARIABLE_PLUSPLUS, v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // variable ::= variable MINUSMINUS 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Variable(Variable.VariableType.VARIABLE_MINUSMINUS, v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // variable ::= PLUSPLUS variable 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Variable(Variable.VariableType.PLUSPLUS_VARIABLE, v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // variable ::= MINUSMINUS variable 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Variable(Variable.VariableType.MINUSMINUS_VARIABLE, v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // variable ::= TILDE variable 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Variable(Variable.VariableType.TILDE_VARIABLE, v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // variable ::= identifier array_index_recursive 
            {
              Variable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Array_Index_Recursive a = (Array_Index_Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Variable(Variable.VariableType.ARRAY_IDENTIFIER, i, a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // variable ::= identifier 
            {
              Variable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Variable(Variable.VariableType.IDENTIFIER, i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr_prime ::= SIZEOF LPAR type RPAR 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Expr(Expr.ExprType.SIZEOF, t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_prime",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr_prime ::= MINUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(Expr.ExprType.UMINUS, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_prime",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr_prime ::= const_val 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Const_Val c = (Const_Val)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(Expr.ExprType.CONST_VAL, c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_prime",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr_prime ::= method_call 
            {
              Expr RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Method_Call m = (Method_Call)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(Expr.ExprType.METHOD_CALL, m);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_prime",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr_prime ::= LPAR expr RPAR 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Expr(Expr.ExprType.EXPR, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_prime",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr_prime ::= expr_prime binary_op expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int boleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int boright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Binary_Op bo = (Binary_Op)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(Expr.ExprType.BINARY_EXPR, e1, bo, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_prime",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= SIZEOF LPAR type RPAR 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Expr(Expr.ExprType.SIZEOF, t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= TILDE expr_prime 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(Expr.ExprType.TILDE,  e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(Expr.ExprType.UMINUS, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= const_val 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Const_Val c = (Const_Val)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(Expr.ExprType.CONST_VAL, c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= variable 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(Expr.ExprType.VARIABLE,     v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= method_call 
            {
              Expr RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Method_Call m = (Method_Call)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(Expr.ExprType.METHOD_CALL, m);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= LPAR expr RPAR 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Expr(Expr.ExprType.EXPR, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= expr binary_op expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int boleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int boright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Binary_Op bo = (Binary_Op)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(Expr.ExprType.BINARY_EXPR, e1, bo, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // loop_stmt ::= FOREACH LPAR identifier IN identifier RPAR block 
            {
              Loop_Stmt RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Loop_Stmt(Loop_Stmt.LoopType.FOREACH ,i1, i2, b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // loop_stmt ::= REPEAT block UNTIL LPAR expr RPAR SEMICOLON 
            {
              Loop_Stmt RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Loop_Stmt(Loop_Stmt.LoopType.REPEAT, b, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // loop_stmt ::= FOR LPAR assignment_epsilon SEMICOLON expr SEMICOLON assignment_expr_epsilon RPAR block 
            {
              Loop_Stmt RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Assignment ae = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Loop_Stmt(Loop_Stmt.LoopType.FOR, ae, e, a, b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // assignment_epsilon ::= 
            {
              Assignment RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_epsilon",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // assignment_epsilon ::= assignment 
            {
              Assignment RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_epsilon",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // assignment_expr_epsilon ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expr_epsilon",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // assignment_expr_epsilon ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expr_epsilon",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // assignment_expr_epsilon ::= assignment 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expr_epsilon",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // var_dcl_epsilon ::= var_dcl_same_type 
            {
              Var_Dcls RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var_Dcls v = (Var_Dcls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dcl_epsilon",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // var_dcl_epsilon ::= 
            {
              Var_Dcls RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dcl_epsilon",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cond_stmt ::= SWITCH LPAR identifier RPAR OF COLON switch_case_cases DEFAULT COLON block 
            {
              Cond_Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Switch_Case_Cases s = (Switch_Case_Cases)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Cond_Stmt(syntaxtree.Cond_Stmt.Cond_Stmt_enum.SWITCH, i, s, b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cond_stmt ::= SWITCH LPAR identifier RPAR OF COLON DEFAULT COLON block 
            {
              Cond_Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Cond_Stmt(syntaxtree.Cond_Stmt.Cond_Stmt_enum.DEFAULT_SWITCH, i, b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cond_stmt ::= IF LPAR expr RPAR block ELSE block 
            {
              Cond_Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Block b1 = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b2 = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Cond_Stmt(syntaxtree.Cond_Stmt.Cond_Stmt_enum.IFELSE, e, b1, b2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // cond_stmt ::= IF LPAR expr RPAR block 
            {
              Cond_Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Cond_Stmt(syntaxtree.Cond_Stmt.Cond_Stmt_enum.IF, e, b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // switch_case_cases ::= CASE INT_CONST COLON block 
            {
              Switch_Case_Cases RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Switch_Case_Cases(i, b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_case_cases",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // switch_case_cases ::= CASE INT_CONST COLON block switch_case_cases 
            {
              Switch_Case_Cases RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Switch_Case_Cases s = (Switch_Case_Cases)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Switch_Case_Cases(i, b, s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_case_cases",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parameters ::= expr COMMA parameters 
            {
              Parameters RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameters p = (Parameters)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parameters(e, p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parameters ::= expr 
            {
              Parameters RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parameters(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // method_call ::= identifier LPAR parameters RPAR 
            {
              Method_Call RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Parameters p = (Parameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Method_Call(i, p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // method_call ::= identifier LPAR RPAR 
            {
              Method_Call RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Method_Call(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assignment ::= variable_prime EQUAL expr 
            {
              Assignment RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Assignment(v, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= CONTINUE SEMICOLON 
            {
              Statement RESULT =null;
		RESULT = new Statement(Statement.StatementEnum.CONTINUE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= BREAK SEMICOLON 
            {
              Statement RESULT =null;
		RESULT = new Statement(Statement.StatementEnum.BREAK);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= RETURN expr SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Statement(Statement.StatementEnum.RETURN_EXP, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= RETURN SEMICOLON 
            {
              Statement RESULT =null;
		RESULT = new Statement(Statement.StatementEnum.RETURN_VOID);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= loop_stmt 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Loop_Stmt l = (Loop_Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Statement(Statement.StatementEnum.LOOP_STMT, l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= cond_stmt 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cond_Stmt c = (Cond_Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Statement(Statement.StatementEnum.COND_STMT, c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= method_call SEMICOLON 
            {
              Statement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Method_Call m = (Method_Call)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Statement(Statement.StatementEnum.METHOD_CALL, m);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= assignment SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT  = new Statement(Statement.StatementEnum.ASSIGNMENT, a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // var_dcls_or_statements ::= statement 
            {
              Var_Dcls_Or_Statements RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Var_Dcls_Or_Statements(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dcls_or_statements",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // var_dcls_or_statements ::= var_dcl_same_type 
            {
              Var_Dcls_Or_Statements RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var_Dcls v = (Var_Dcls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Var_Dcls_Or_Statements(v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dcls_or_statements",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // var_dcls_or_statements ::= statement var_dcls_or_statements 
            {
              Var_Dcls_Or_Statements RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int voleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int voright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var_Dcls_Or_Statements vo = (Var_Dcls_Or_Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Var_Dcls_Or_Statements(s, vo);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dcls_or_statements",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // var_dcls_or_statements ::= var_dcl_same_type var_dcls_or_statements 
            {
              Var_Dcls_Or_Statements RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Var_Dcls vs = (Var_Dcls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int voleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int voright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var_Dcls_Or_Statements vo = (Var_Dcls_Or_Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Var_Dcls_Or_Statements(vs, vo);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dcls_or_statements",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // block ::= BEGIN var_dcls_or_statements END 
            {
              Block RESULT =null;
		int voleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int voright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Var_Dcls_Or_Statements vo = (Var_Dcls_Or_Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Block(vo);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // block ::= BEGIN END 
            {
              Block RESULT =null;
		RESULT = new Block();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // variable_prime ::= variable_prime DOT identifier 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Variable(Variable.VariableType.RECORD_ITEM, v, i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_prime",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // variable_prime ::= identifier array_index_recursive 
            {
              Variable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Array_Index_Recursive ai = (Array_Index_Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Variable(Variable.VariableType.ARRAY_IDENTIFIER, i, ai);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_prime",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // variable_prime ::= identifier 
            {
              Variable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Variable(Variable.VariableType.IDENTIFIER, i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_prime",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var_dcl_cnt ::= variable_prime EQUAL expr 
            {
              Var_Dcl RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Var_Dcl(v, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var_dcl_cnt ::= variable_prime 
            {
              Var_Dcl RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Var_Dcl(v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var_dcl_same_type ::= CONST var_dcl_no_const 
            {
              Var_Dcls RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var_Dcls vd = (Var_Dcls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Var_Dcls(true, vd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dcl_same_type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var_dcl_same_type ::= var_dcl_no_const 
            {
              Var_Dcls RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var_Dcls vd = (Var_Dcls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Var_Dcls(false, vd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dcl_same_type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var_dcl_cnt_extend ::= COMMA var_dcl_cnt 
            {
              Var_Dcls RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var_Dcl v = (Var_Dcl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Var_Dcls(v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_extend",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var_dcl_cnt_extend ::= COMMA var_dcl_cnt var_dcl_cnt_extend 
            {
              Var_Dcls RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Var_Dcl v = (Var_Dcl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var_Dcls vd = (Var_Dcls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Var_Dcls(v, vd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_extend",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // var_dcl_no_const ::= type var_dcl_cnt var_dcl_cnt_extend SEMICOLON 
            {
              Var_Dcls RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var_Dcl v = (Var_Dcl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int veleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int veright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Var_Dcls ve = (Var_Dcls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Var_Dcls(t, v, ve);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dcl_no_const",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // var_dcl_no_const ::= type var_dcl_cnt SEMICOLON 
            {
              Var_Dcls RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Var_Dcl v = (Var_Dcl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Var_Dcls(t,v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dcl_no_const",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var_dcls ::= var_dcl_same_type var_dcls 
            {
              Var_Dcls RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Var_Dcls v = (Var_Dcls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var_Dcls vs = (Var_Dcls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Var_Dcls(v, vs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dcls",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_dcls ::= var_dcl_same_type 
            {
              Var_Dcls RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var_Dcls v = (Var_Dcls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dcls",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // struct_dec ::= RECORD identifier BEGIN var_dcls END RECORD SEMICOLON 
            {
              Struct_Dec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Var_Dcls v = (Var_Dcls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new Struct_Dec(i, v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_dec",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type ::= identifier 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Type(Type.TypeEnum.ID, i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type ::= AUTO 
            {
              Type RESULT =null;
		RESULT = new Type(Type.TypeEnum.AUTO);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= VOID 
            {
              Type RESULT =null;
		RESULT = new Type(Type.TypeEnum.VOID);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= STRING 
            {
              Type RESULT =null;
		RESULT = new Type(Type.TypeEnum.STRING);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= DOUBLE 
            {
              Type RESULT =null;
		RESULT = new Type(Type.TypeEnum.DOUBLE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= CHAR 
            {
              Type RESULT =null;
		RESULT = new Type(Type.TypeEnum.CHAR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= LONG 
            {
              Type RESULT =null;
		RESULT = new Type(Type.TypeEnum.LONG);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= FLOAT 
            {
              Type RESULT =null;
		RESULT = new Type(Type.TypeEnum.FLOAT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= BOOL 
            {
              Type RESULT =null;
		RESULT = new Type(Type.TypeEnum.BOOL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= INT 
            {
              Type RESULT =null;
		RESULT = new Type(Type.TypeEnum.INT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arguments ::= type identifier idarray COMMA arguments 
            {
              Arguments RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Idarray ia = (Idarray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arguments a = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new  Arguments(t, i, ia, a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arguments ::= type identifier idarray 
            {
              Arguments RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Idarray ia = (Idarray)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Arguments(t, i, ia);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // idarray ::= brac 
            {
              Idarray RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Brac b = (Brac)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Idarray(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idarray",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // idarray ::= 
            {
              Idarray RESULT =null;
		RESULT = new Idarray();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idarray",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // brac ::= LBRAC RBRAC 
            {
              Brac RESULT =null;
		RESULT = new Brac();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("brac",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // brac ::= LBRAC RBRAC brac 
            {
              Brac RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Brac b = (Brac)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Brac(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("brac",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // extern_dcl ::= EXTERN type identifier SEMICOLON 
            {
              Extern_Dcl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Extern_Dcl(t, i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extern_dcl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // func_dcl ::= FUNCTION type identifier LPAR arguments RPAR block 
            {
              Func_Dcl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arguments a = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Func_Dcl(t, i, a, b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_dcl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // func_dcl ::= FUNCTION type identifier LPAR RPAR block 
            {
              Func_Dcl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Func_Dcl(t, i, b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_dcl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // func_dcl ::= FUNCTION type identifier LPAR arguments RPAR SEMICOLON 
            {
              Func_Dcl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arguments a = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Func_Dcl(t, i, a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_dcl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_dcl ::= FUNCTION type identifier LPAR RPAR SEMICOLON 
            {
              Func_Dcl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new Func_Dcl(t, i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_dcl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // func_extern ::= extern_dcl 
            {
              Func_Extern RESULT =null;
		int edleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int edright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Extern_Dcl ed = (Extern_Dcl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Func_Extern(ed);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_extern",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // func_extern ::= func_dcl 
            {
              Func_Extern RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Func_Dcl fd = (Func_Dcl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Func_Extern(fd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_extern",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program ::= struct_dec program 
            {
              Program RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Struct_Dec sd = (Struct_Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Program(sd, p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= func_extern program 
            {
              Program RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int feright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Func_Extern fe = (Func_Extern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Program(fe, p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= var_dcl_same_type program 
            {
              Program RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Var_Dcls vd = (Var_Dcls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Program(vd, p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= struct_dec 
            {
              Program RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Struct_Dec sd = (Struct_Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Program(sd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= func_extern 
            {
              Program RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Func_Extern fe = (Func_Extern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Program(fe);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= var_dcl_same_type 
            {
              Program RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var_Dcls vd = (Var_Dcls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Program(vd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

