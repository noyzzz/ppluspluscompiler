/* The following code was generated by JFlex 1.6.1 */

import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Plexer.flex</tt>
 */
public class Plexer extends sym implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\15\1\0\1\17\1\14\22\0\1\17\1\44\1\66"+
    "\1\21\1\0\1\55\1\50\1\23\1\60\1\61\1\53\1\54\1\62"+
    "\1\22\1\2\1\20\1\1\11\1\1\63\1\16\1\45\1\43\1\46"+
    "\2\0\4\3\1\3\1\3\21\3\1\3\2\3\1\64\1\24\1\65"+
    "\1\52\1\3\1\0\1\11\1\25\1\33\1\35\1\7\1\10\1\26"+
    "\1\34\1\27\1\3\1\32\1\12\1\3\1\30\1\31\1\37\1\3"+
    "\1\5\1\13\1\4\1\6\1\42\1\41\1\36\1\3\1\40\1\56"+
    "\1\51\1\57\1\47\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff91\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\11\2\2\3\1\4\1\5\1\0\1\6"+
    "\1\0\10\2\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\0\17\2\4\0\1\36\2\0\4\2\1\37"+
    "\1\40\1\2\1\41\1\2\1\42\6\2\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\6\2\1\55\4\2\1\56\1\57\5\2\1\0\1\60"+
    "\1\0\1\60\1\61\1\0\4\2\1\62\1\2\1\63"+
    "\7\2\1\64\4\2\1\65\4\2\1\66\4\2\2\0"+
    "\1\67\2\2\1\70\1\71\2\2\1\72\2\2\1\73"+
    "\2\2\1\74\3\2\1\75\2\2\1\76\5\2\1\77"+
    "\1\100\1\101\2\2\1\102\2\2\1\103\1\104\1\105"+
    "\1\106\2\2\1\107\1\110\1\111\1\112\1\113\2\2"+
    "\1\114\1\2\1\115\1\2\1\116\1\117\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u02cb\0\u0302"+
    "\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba"+
    "\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u02cb"+
    "\0\u02cb\0\u02cb\0\u02cb\0\u02cb\0\u0672\0\u02cb\0\u02cb\0\u02cb"+
    "\0\u02cb\0\u02cb\0\u02cb\0\u02cb\0\u02cb\0\u02cb\0\u02cb\0\u06a9"+
    "\0\u06e0\0\u02cb\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a"+
    "\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2"+
    "\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u02cb\0\u0b63"+
    "\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\245\0\u0cad\0\u0ce4"+
    "\0\245\0\u0d1b\0\245\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e"+
    "\0\u0e65\0\u02cb\0\u02cb\0\u02cb\0\u02cb\0\u02cb\0\u02cb\0\u02cb"+
    "\0\u02cb\0\u02cb\0\u0717\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78"+
    "\0\u0faf\0\245\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\245"+
    "\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a"+
    "\0\u02cb\0\u02cb\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\245"+
    "\0\u13c4\0\245\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e"+
    "\0\u1545\0\245\0\u157c\0\u15b3\0\u15ea\0\u1621\0\245\0\u1658"+
    "\0\u168f\0\u16c6\0\u16fd\0\245\0\u1734\0\u176b\0\u17a2\0\u17d9"+
    "\0\u1243\0\u1810\0\u02cb\0\u1847\0\u187e\0\245\0\245\0\u18b5"+
    "\0\u18ec\0\245\0\u1923\0\u195a\0\245\0\u1991\0\u19c8\0\245"+
    "\0\u19ff\0\u1a36\0\u1a6d\0\245\0\u1aa4\0\u1adb\0\245\0\u1b12"+
    "\0\u1b49\0\u1b80\0\u1bb7\0\u1bee\0\245\0\245\0\245\0\u1c25"+
    "\0\u1c5c\0\245\0\u1c93\0\u1cca\0\245\0\245\0\245\0\245"+
    "\0\u1d01\0\u1d38\0\245\0\245\0\245\0\245\0\245\0\u1d6f"+
    "\0\u1da6\0\245\0\u1ddd\0\245\0\u1e14\0\245\0\245\0\245";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\16"+
    "\1\20\1\21\1\22\1\23\1\0\1\24\1\25\1\26"+
    "\1\27\1\30\1\4\1\31\1\4\1\32\4\4\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\14\60\2\0\6\60\1\61"+
    "\41\60\1\62\1\0\1\3\1\63\65\0\1\4\1\0"+
    "\11\4\11\0\16\4\25\0\1\4\1\0\2\4\1\64"+
    "\6\4\11\0\16\4\25\0\1\4\1\0\4\4\1\65"+
    "\4\4\11\0\16\4\25\0\1\4\1\0\11\4\11\0"+
    "\3\4\1\66\12\4\25\0\1\4\1\0\7\4\1\67"+
    "\1\4\11\0\3\4\1\70\5\4\1\71\4\4\25\0"+
    "\1\4\1\0\3\4\1\72\2\4\1\73\1\74\1\4"+
    "\11\0\4\4\1\75\11\4\25\0\1\4\1\0\11\4"+
    "\11\0\3\4\1\76\12\4\25\0\1\4\1\0\11\4"+
    "\11\0\4\4\1\77\11\4\25\0\1\4\1\0\1\4"+
    "\1\100\7\4\11\0\2\4\1\101\11\4\1\102\1\4"+
    "\41\0\1\103\160\0\1\104\1\105\66\0\1\106\67\0"+
    "\1\107\44\0\24\110\1\111\42\110\1\0\1\4\1\0"+
    "\2\4\1\112\1\4\1\113\4\4\11\0\4\4\1\114"+
    "\11\4\25\0\1\4\1\0\11\4\11\0\4\4\1\115"+
    "\11\4\25\0\1\4\1\0\5\4\1\116\3\4\11\0"+
    "\3\4\1\117\12\4\25\0\1\4\1\0\11\4\11\0"+
    "\4\4\1\120\11\4\25\0\1\4\1\0\2\4\1\121"+
    "\1\122\1\4\1\123\3\4\11\0\16\4\25\0\1\4"+
    "\1\0\6\4\1\124\2\4\11\0\4\4\1\125\2\4"+
    "\1\126\6\4\25\0\1\4\1\0\4\4\1\127\4\4"+
    "\11\0\4\4\1\130\11\4\25\0\1\4\1\0\11\4"+
    "\11\0\4\4\1\131\11\4\67\0\1\132\66\0\1\133"+
    "\66\0\1\134\66\0\1\135\77\0\1\136\12\0\14\60"+
    "\2\0\6\60\1\0\41\60\5\0\1\137\1\140\22\0"+
    "\1\141\35\0\1\142\1\0\1\143\66\0\1\4\1\0"+
    "\3\4\1\144\5\4\11\0\16\4\25\0\1\4\1\0"+
    "\1\4\1\145\7\4\11\0\6\4\1\146\3\4\1\147"+
    "\3\4\25\0\1\4\1\0\1\4\1\150\7\4\11\0"+
    "\16\4\25\0\1\4\1\0\10\4\1\151\11\0\16\4"+
    "\25\0\1\4\1\0\11\4\11\0\10\4\1\152\5\4"+
    "\25\0\1\4\1\0\1\4\1\153\7\4\11\0\16\4"+
    "\25\0\1\4\1\0\11\4\11\0\3\4\1\154\12\4"+
    "\25\0\1\4\1\0\7\4\1\155\1\4\11\0\16\4"+
    "\25\0\1\4\1\0\11\4\11\0\4\4\1\156\11\4"+
    "\25\0\1\4\1\0\2\4\1\157\6\4\11\0\16\4"+
    "\25\0\1\4\1\0\11\4\11\0\10\4\1\160\5\4"+
    "\25\0\1\4\1\0\11\4\11\0\3\4\1\161\12\4"+
    "\25\0\1\4\1\0\2\4\1\162\3\4\1\163\2\4"+
    "\11\0\16\4\25\0\1\4\1\0\11\4\11\0\13\4"+
    "\1\164\2\4\25\0\1\4\1\0\11\4\11\0\2\4"+
    "\1\165\13\4\42\0\1\16\50\0\14\104\1\166\1\167"+
    "\51\104\21\105\1\170\45\105\14\106\1\171\52\106\23\0"+
    "\1\172\43\0\67\173\1\0\1\4\1\0\4\4\1\174"+
    "\4\4\11\0\16\4\25\0\1\4\1\0\11\4\11\0"+
    "\1\4\1\175\14\4\25\0\1\4\1\0\11\4\11\0"+
    "\4\4\1\176\11\4\25\0\1\4\1\0\1\4\1\177"+
    "\7\4\11\0\16\4\25\0\1\4\1\0\1\4\1\200"+
    "\7\4\11\0\12\4\1\201\3\4\25\0\1\4\1\0"+
    "\1\4\1\202\7\4\11\0\16\4\25\0\1\4\1\0"+
    "\1\4\1\203\7\4\11\0\16\4\25\0\1\4\1\0"+
    "\10\4\1\204\11\0\16\4\25\0\1\4\1\0\11\4"+
    "\11\0\3\4\1\205\12\4\25\0\1\4\1\0\6\4"+
    "\1\206\2\4\11\0\16\4\25\0\1\4\1\0\5\4"+
    "\1\207\3\4\11\0\16\4\25\0\1\4\1\0\3\4"+
    "\1\210\5\4\11\0\16\4\25\0\1\4\1\0\11\4"+
    "\11\0\2\4\1\211\13\4\25\0\1\4\1\0\4\4"+
    "\1\212\4\4\11\0\16\4\25\0\1\4\1\0\3\4"+
    "\1\213\5\4\11\0\16\4\25\0\1\4\1\0\11\4"+
    "\11\0\4\4\1\214\11\4\25\0\1\4\1\0\4\4"+
    "\1\215\4\4\11\0\16\4\25\0\1\4\1\0\11\4"+
    "\11\0\2\4\1\216\13\4\25\0\1\4\1\0\4\4"+
    "\1\217\4\4\11\0\16\4\25\0\1\4\1\0\4\4"+
    "\1\220\4\4\11\0\16\4\25\0\1\4\1\0\11\4"+
    "\11\0\6\4\1\221\7\4\25\0\1\4\1\0\10\4"+
    "\1\144\11\0\16\4\25\0\1\4\1\0\6\4\1\222"+
    "\2\4\11\0\16\4\25\0\1\4\1\0\4\4\1\223"+
    "\4\4\11\0\16\4\25\0\1\4\1\0\11\4\11\0"+
    "\1\4\1\224\14\4\25\0\1\4\1\0\11\4\11\0"+
    "\2\4\1\225\13\4\25\0\1\4\1\0\1\4\1\226"+
    "\7\4\11\0\16\4\25\0\1\4\1\0\4\4\1\227"+
    "\4\4\11\0\16\4\25\0\1\4\1\0\1\4\1\230"+
    "\7\4\11\0\16\4\24\0\15\166\1\171\51\166\14\231"+
    "\1\232\52\231\20\105\1\171\1\170\45\105\23\0\1\233"+
    "\44\0\1\4\1\0\6\4\1\234\2\4\11\0\16\4"+
    "\25\0\1\4\1\0\11\4\11\0\2\4\1\235\13\4"+
    "\25\0\1\4\1\0\7\4\1\236\1\4\11\0\16\4"+
    "\25\0\1\4\1\0\11\4\11\0\4\4\1\237\11\4"+
    "\25\0\1\4\1\0\3\4\1\240\5\4\11\0\16\4"+
    "\25\0\1\4\1\0\11\4\11\0\12\4\1\241\3\4"+
    "\25\0\1\4\1\0\4\4\1\242\4\4\11\0\16\4"+
    "\25\0\1\4\1\0\1\4\1\243\6\4\1\244\11\0"+
    "\16\4\25\0\1\4\1\0\2\4\1\245\6\4\11\0"+
    "\16\4\25\0\1\4\1\0\6\4\1\246\2\4\11\0"+
    "\16\4\25\0\1\4\1\0\11\4\11\0\1\247\15\4"+
    "\25\0\1\4\1\0\11\4\11\0\10\4\1\250\5\4"+
    "\25\0\1\4\1\0\2\4\1\251\6\4\11\0\16\4"+
    "\25\0\1\4\1\0\2\4\1\252\6\4\11\0\16\4"+
    "\25\0\1\4\1\0\6\4\1\253\2\4\11\0\16\4"+
    "\25\0\1\4\1\0\7\4\1\254\1\4\11\0\16\4"+
    "\25\0\1\4\1\0\2\4\1\255\6\4\11\0\16\4"+
    "\25\0\1\4\1\0\1\4\1\256\7\4\11\0\16\4"+
    "\25\0\1\4\1\0\1\4\1\257\7\4\11\0\16\4"+
    "\25\0\1\4\1\0\6\4\1\260\2\4\11\0\16\4"+
    "\25\0\1\4\1\0\11\4\11\0\3\4\1\261\12\4"+
    "\25\0\1\4\1\0\11\4\11\0\2\4\1\262\13\4"+
    "\25\0\1\4\1\0\11\4\11\0\4\4\1\263\11\4"+
    "\25\0\1\4\1\0\11\4\11\0\6\4\1\264\7\4"+
    "\41\0\1\171\52\0\1\4\1\0\11\4\11\0\5\4"+
    "\1\265\10\4\25\0\1\4\1\0\11\4\11\0\3\4"+
    "\1\266\12\4\25\0\1\4\1\0\1\4\1\267\7\4"+
    "\11\0\16\4\25\0\1\4\1\0\3\4\1\270\5\4"+
    "\11\0\16\4\25\0\1\4\1\0\11\4\11\0\2\4"+
    "\1\271\13\4\25\0\1\4\1\0\1\4\1\272\7\4"+
    "\11\0\16\4\25\0\1\4\1\0\3\4\1\273\5\4"+
    "\11\0\16\4\25\0\1\4\1\0\7\4\1\274\1\4"+
    "\11\0\16\4\25\0\1\4\1\0\11\4\11\0\3\4"+
    "\1\275\12\4\25\0\1\4\1\0\11\4\11\0\10\4"+
    "\1\276\5\4\25\0\1\4\1\0\1\4\1\277\7\4"+
    "\11\0\16\4\25\0\1\4\1\0\11\4\11\0\3\4"+
    "\1\300\12\4\25\0\1\4\1\0\11\4\11\0\2\4"+
    "\1\301\13\4\25\0\1\4\1\0\11\4\11\0\6\4"+
    "\1\302\7\4\25\0\1\4\1\0\11\4\11\0\1\4"+
    "\1\303\14\4\25\0\1\4\1\0\11\4\11\0\6\4"+
    "\1\304\7\4\25\0\1\4\1\0\5\4\1\305\3\4"+
    "\11\0\16\4\25\0\1\4\1\0\11\4\11\0\7\4"+
    "\1\306\6\4\25\0\1\4\1\0\1\4\1\307\7\4"+
    "\11\0\16\4\25\0\1\4\1\0\11\4\11\0\3\4"+
    "\1\310\12\4\25\0\1\4\1\0\7\4\1\311\1\4"+
    "\11\0\16\4\25\0\1\4\1\0\4\4\1\312\4\4"+
    "\11\0\16\4\25\0\1\4\1\0\11\4\11\0\4\4"+
    "\1\313\11\4\25\0\1\4\1\0\11\4\11\0\7\4"+
    "\1\314\6\4\25\0\1\4\1\0\3\4\1\315\5\4"+
    "\11\0\16\4\25\0\1\4\1\0\1\4\1\316\7\4"+
    "\11\0\16\4\25\0\1\4\1\0\11\4\11\0\3\4"+
    "\1\317\12\4\25\0\1\4\1\0\4\4\1\320\4\4"+
    "\11\0\16\4\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7755];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\13\1\2\11\1\1\1\0\1\1\1\0\14\1"+
    "\5\11\1\1\12\11\2\1\1\11\1\0\17\1\4\0"+
    "\1\11\2\0\20\1\11\11\23\1\1\0\1\1\1\0"+
    "\2\11\1\0\35\1\2\0\1\11\65\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
        StringBuffer string = new StringBuffer();
        public Plexer(java.io.Reader in, ComplexSymbolFactory sf){
    	this(in);
    	symbolFactory = sf;
        }
        ComplexSymbolFactory symbolFactory;

      public Symbol symbol(String name, int sym) {
          return symbolFactory.newSymbol(name, sym, new Location(yyline+1,yycolumn+1,yychar), new Location(yyline+1,yycolumn+yylength(),yychar+yylength()));
      }

      public Symbol symbol(String name, int sym, Object val) {
          Location left = new Location(yyline+1,yycolumn+1,yychar);
          Location right= new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
          return symbolFactory.newSymbol(name, sym, left, right,val);
      }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Plexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {      return symbolFactory.newSymbol("EOF", EOF, new Location(yyline+1,yycolumn+1,yychar), new Location(yyline+1,yycolumn+1,yychar+1));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol("intconst",INT_CONST, new Integer(Integer.parseInt(yytext())));
            }
          case 81: break;
          case 2: 
            { return symbol("Identifier",ID, yytext());
            }
          case 82: break;
          case 3: 
            { /* ignore */
            }
          case 83: break;
          case 4: 
            { return symbol("semicolon", SEMICOLON);
            }
          case 84: break;
          case 5: 
            { return symbol("slash", SLASH);
            }
          case 85: break;
          case 6: 
            { return symbol("minus", MINUS);
            }
          case 86: break;
          case 7: 
            { return symbol("equal", EQUAL);
            }
          case 87: break;
          case 8: 
            { return symbol("exclam", EXCLAM);
            }
          case 88: break;
          case 9: 
            { return symbol("less", LESS);
            }
          case 89: break;
          case 10: 
            { return symbol("greater", GREATER);
            }
          case 90: break;
          case 11: 
            { return symbol("tilde", TILDE);
            }
          case 91: break;
          case 12: 
            { return symbol("ampersand", AMPERSAND);
            }
          case 92: break;
          case 13: 
            { return symbol("pipe", PIPE);
            }
          case 93: break;
          case 14: 
            { return symbol("caret", CARET);
            }
          case 94: break;
          case 15: 
            { return symbol("times", TIMES);
            }
          case 95: break;
          case 16: 
            { return symbol("plus", PLUS);
            }
          case 96: break;
          case 17: 
            { return symbol("mod", MOD);
            }
          case 97: break;
          case 18: 
            { return symbol("lbrace", LBRACE);
            }
          case 98: break;
          case 19: 
            { return symbol("rbrace", RBRACE);
            }
          case 99: break;
          case 20: 
            { return symbol("lpar", LPAR);
            }
          case 100: break;
          case 21: 
            { return symbol("rpar", RPAR);
            }
          case 101: break;
          case 22: 
            { return symbol("comma", COMMA);
            }
          case 102: break;
          case 23: 
            { return symbol("colon", COLON);
            }
          case 103: break;
          case 24: 
            { return symbol("lbrac", LBRAC);
            }
          case 104: break;
          case 25: 
            { return symbol("rbrac", RBRAC);
            }
          case 105: break;
          case 26: 
            { string.setLength(0); yybegin(STRING);
            }
          case 106: break;
          case 27: 
            { string.append( yytext() );
            }
          case 107: break;
          case 28: 
            { string.append('\\');
            }
          case 108: break;
          case 29: 
            { yybegin(YYINITIAL);
      return symbol("StringConst",STRING_CONST,string.toString());
            }
          case 109: break;
          case 30: 
            { return symbol("minusminus", MINUSMINUS);
            }
          case 110: break;
          case 31: 
            { return symbol("if",IF);
            }
          case 111: break;
          case 32: 
            { return symbol("in",IN);
            }
          case 112: break;
          case 33: 
            { return symbol("or", OR);
            }
          case 113: break;
          case 34: 
            { return symbol("of",OF);
            }
          case 114: break;
          case 35: 
            { return symbol("isequal", ISEQUAL);
            }
          case 115: break;
          case 36: 
            { return symbol("notEqual", NOTEQUAL);
            }
          case 116: break;
          case 37: 
            { return symbol("leq", LEQ);
            }
          case 117: break;
          case 38: 
            { return symbol("geq", GEQ);
            }
          case 118: break;
          case 39: 
            { return symbol("plusplus", PLUSPLUS);
            }
          case 119: break;
          case 40: 
            { string.append('\t');
            }
          case 120: break;
          case 41: 
            { string.append('\r');
            }
          case 121: break;
          case 42: 
            { string.append('\n');
            }
          case 122: break;
          case 43: 
            { string.append('\"');
            }
          case 123: break;
          case 44: 
            { return symbol("realconst",REAL_CONST, new Double(Double.parseDouble(yytext())));
            }
          case 124: break;
          case 45: 
            { return symbol("end",END);
            }
          case 125: break;
          case 46: 
            { return symbol("for",FOR);
            }
          case 126: break;
          case 47: 
            { return symbol("and", AND);
            }
          case 127: break;
          case 48: 
            { /**/
            }
          case 128: break;
          case 49: 
            { return symbol("character",CHAR_CONST,new Character(yytext().charAt(1)));
            }
          case 129: break;
          case 50: 
            { return symbol("int",INT, new Integer( INT_TYPE ));
            }
          case 130: break;
          case 51: 
            { return symbol("not", NOT);
            }
          case 131: break;
          case 52: 
            { return symbol("boolconst",BOOL_CONST, new Boolean(Boolean.parseBoolean(yytext())));
            }
          case 132: break;
          case 53: 
            { return symbol("else",ELSE);
            }
          case 133: break;
          case 54: 
            { return symbol("long",LONG);
            }
          case 134: break;
          case 55: 
            { return symbol("character",CHAR_CONST,new Character(yytext().charAt(2)));
            }
          case 135: break;
          case 56: 
            { return symbol("bool",BOOL);
            }
          case 136: break;
          case 57: 
            { return symbol("goto",GOTO);
            }
          case 137: break;
          case 58: 
            { return symbol("case",CASE);
            }
          case 138: break;
          case 59: 
            { return symbol("char",CHAR);
            }
          case 139: break;
          case 60: 
            { return symbol("void",VOID);
            }
          case 140: break;
          case 61: 
            { return symbol("until",UNTIL);
            }
          case 141: break;
          case 62: 
            { return symbol("float",FLOAT);
            }
          case 142: break;
          case 63: 
            { return symbol("break",BREAK);
            }
          case 143: break;
          case 64: 
            { return symbol("begin",BEGIN);
            }
          case 144: break;
          case 65: 
            { return symbol("input",INPUT);
            }
          case 145: break;
          case 66: 
            { return symbol("const",CONST);
            }
          case 146: break;
          case 67: 
            { return symbol("return",RETURN);
            }
          case 147: break;
          case 68: 
            { return symbol("record",RECORD);
            }
          case 148: break;
          case 69: 
            { return symbol("repeat",REPEAT);
            }
          case 149: break;
          case 70: 
            { return symbol("extern",EXTERN);
            }
          case 150: break;
          case 71: 
            { return symbol("string",STRING);
            }
          case 151: break;
          case 72: 
            { return symbol("static",STATIC);
            }
          case 152: break;
          case 73: 
            { return symbol("sizeof",SIZEOF);
            }
          case 153: break;
          case 74: 
            { return symbol("switch",SWITCH);
            }
          case 154: break;
          case 75: 
            { return symbol("output",OUTPUT);
            }
          case 155: break;
          case 76: 
            { return symbol("double",DOUBLE);
            }
          case 156: break;
          case 77: 
            { return symbol("foreach",FOREACH);
            }
          case 157: break;
          case 78: 
            { return symbol("default",DEFAULT);
            }
          case 158: break;
          case 79: 
            { return symbol("function",FUNCTION);
            }
          case 159: break;
          case 80: 
            { return symbol("continue",CONTINUE);
            }
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
